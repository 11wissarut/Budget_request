import { useEffect, useMemo, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { api, Requests } from '@/lib/api';
import { getToken } from '@/lib/auth';
import Stats from '@/components/Stats';
import BudgetDetailTable from '@/components/BudgetDetailTable';
import type { BudgetRequest } from '@/types';

// üí° ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ö‡∏ô‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
interface StatsData {
  total: number;
  pending: number;
  approved: number;
  rejected: number;
  construction: number;
  equipment: number;
}

// üí° ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
interface DetailedRequest extends BudgetRequest {
  // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  totalDisbursed: number;     // ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏°‡∏≤‡∏à‡∏≤‡∏Å total_disbursed ‡∏Ç‡∏≠‡∏á backend)
  remainingBalance: number;   // ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ = approved_amount - totalDisbursed (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ approved_amount ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 0)
  created_by_name?: string;   // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
const CATEGORIES = ['‡∏Ñ‡πà‡∏≤‡∏ß‡∏±‡∏™‡∏î‡∏∏‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á', '‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå', '‡∏Ñ‡πà‡∏≤‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ', '‡∏Ñ‡πà‡∏≤‡∏à‡πâ‡∏≤‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß'];

export default function Dashboard() {
  // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ + ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠ + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÇ‡∏´‡∏•‡∏î
  const [stats, setStats] = useState<StatsData>({
    total: 0, pending: 0, approved: 0, rejected: 0, construction: 0, equipment: 0
  });
  const [requests, setRequests] = useState<DetailedRequest[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedYear, setSelectedYear] = useState('all');
  const [selectedCategory, setSelectedCategory] = useState('all');

  const navigate = useNavigate();
  const BASE_URL = import.meta.env.VITE_API_BASE ?? 'http://localhost:4002';

  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
    if (!getToken()) {
      navigate('/login');
      return;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠
    const fetchData = () => {
      setIsLoading(true);

      Promise.all([
        api('/api/stats'),   // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
        Requests.list()      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏£‡∏≤‡∏õ‡∏£‡∏±‡∏ö backend ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà total_disbursed ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß)
      ])
      .then(([statsData, requestsData]) => {
        setStats(statsData);

        // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend ‚Üí ‡πÇ‡∏Ñ‡∏£‡∏á‡∏ó‡∏µ‡πà UI ‡πÉ‡∏ä‡πâ
        const mapped: DetailedRequest[] = (requestsData ?? []).map((r: any) => {
          const approvedAmount = Number(r.approved_amount ?? 0);
          const totalDisbursed = Number(r.total_disbursed ?? 0);
          const remainingBalance = Math.max(approvedAmount - totalDisbursed, 0);

          return {
            id: r.id,
            title: r.title,
            category: r.category,
            fiscal_year: r.fiscal_year,
            total_amount: r.total_amount,
            approved_amount: r.approved_amount,
            approval_note: r.approval_note,
            status: r.status,
            created_at: r.created_at,
            created_by: r.created_by,
            totalDisbursed,              
            remainingBalance,            
            created_by_name: r.created_by_name,
          };
        });

        setRequests(mapped);
      })
      .catch(error => {
        console.error('Failed to fetch dashboard data:', error);
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ');
      })
      .finally(() => {
        setIsLoading(false);
      });
    };

    fetchData();
    window.addEventListener('focus', fetchData);
    return () => window.removeEventListener('focus', fetchData);
  }, [navigate]);

  const fiscalYears = useMemo(() => {
    const years = new Set(requests.map(r => r.fiscal_year));
    return ['all', ...Array.from(years).sort((a, b) => b - a)];
  }, [requests]);

  // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠ PDF
  const handleExportRequestPDF = () => {
    const params = new URLSearchParams({
      fiscal_year: selectedYear,
      category: selectedCategory,
    });
    const reportUrl = `${BASE_URL}/api/analytics/report/pdf?${params.toString()}`;
    window.open(reportUrl, '_blank');
  };

  // ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢ PDF
  const handleExportDisbursementPDF = () => {
    const params = new URLSearchParams({
      fiscal_year: selectedYear,
      category: selectedCategory,
    });
    const reportUrl = `${BASE_URL}/api/analytics/report/disbursement/pdf?${params.toString()}`;
    window.open(reportUrl, '_blank');
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center gap-4">
        <h2 className="text-2xl font-semibold">‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</h2>
        
        <div className="flex items-center gap-2">
          {/* Filters */}
          <select 
            value={selectedYear} 
            onChange={e => setSelectedYear(e.target.value)}
            className="select select-bordered select-xs"
          >
            {fiscalYears.map(year => (
              <option key={year} value={year}>
                {year === 'all' ? '‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì' : year}
              </option>
            ))}
          </select>

          <select 
            value={selectedCategory} 
            onChange={e => setSelectedCategory(e.target.value)}
            className="select select-bordered select-xs"
          >
            <option value="all">‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</option>
            {CATEGORIES.map(cat => (
              <option key={cat} value={cat}>{cat}</option>
            ))}
          </select>

          {/* Report Buttons */}
          <button onClick={handleExportRequestPDF} className="btn btn-secondary btn-xs">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠</button>
          <button onClick={handleExportDisbursementPDF} className="btn btn-accent btn-xs">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢</button>
        </div>
      </div>

      {isLoading ? (
        <div className="h-24 flex justify-center items-center">Loading...</div>
      ) : (
        <>
          <Stats
            total={stats.total}
            pending={stats.pending}
            approved={stats.approved}
            rejected={stats.rejected}
            construction={stats.construction}
            equipment={stats.equipment}
          />
          <BudgetDetailTable requests={requests} />
        </>
      )}
    </div>
  );
}
