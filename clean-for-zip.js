#!/usr/bin/env node

// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP
const fs = require('fs')
const path = require('path')

console.log('üßπ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP')
console.log('‚ïê'.repeat(50))

function deleteRecursive(dirPath) {
  if (fs.existsSync(dirPath)) {
    try {
      fs.rmSync(dirPath, { recursive: true, force: true })
      console.log(`‚úÖ ‡∏•‡∏ö: ${dirPath}`)
      return true
    } catch (error) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö: ${dirPath} (${error.message})`)
      return false
    }
  }
  return false
}

function deleteFile(filePath) {
  if (fs.existsSync(filePath)) {
    try {
      fs.unlinkSync(filePath)
      console.log(`‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filePath}`)
      return true
    } catch (error) {
      console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filePath} (${error.message})`)
      return false
    }
  }
  return false
}

function cleanDirectory(dirPath, pattern) {
  if (!fs.existsSync(dirPath)) return

  try {
    const files = fs.readdirSync(dirPath)
    files.forEach(file => {
      if (file.match(pattern)) {
        const fullPath = path.join(dirPath, file)
        deleteFile(fullPath)
      }
    })
  } catch (error) {
    console.log(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå: ${dirPath}`)
  }
}

function main() {
  const projectRoot = process.cwd()
  
  console.log(`üìÅ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå: ${projectRoot}`)
  console.log('')

  // 1. ‡∏•‡∏ö node_modules ‡∏ó‡∏∏‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå
  console.log('1Ô∏è‚É£ ‡∏•‡∏ö node_modules...')
  const nodeModulesPaths = [
    'node_modules',
    'server-js/node_modules',
    'web/node_modules',
    'web-js/node_modules'
  ]
  
  nodeModulesPaths.forEach(p => deleteRecursive(p))

  // 2. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .env
  console.log('\n2Ô∏è‚É£ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå .env...')
  const envFiles = [
    '.env',
    'server-js/.env'
  ]
  
  envFiles.forEach(f => deleteFile(f))

  // 3. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
  console.log('\n3Ô∏è‚É£ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î...')
  const uploadsPath = 'server-js/uploads'
  if (fs.existsSync(uploadsPath)) {
    cleanDirectory(uploadsPath, /^[^.]/); // ‡∏•‡∏ö‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ .
  }

  // 4. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå log
  console.log('\n4Ô∏è‚É£ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå log...')
  const logPatterns = [
    /\.log$/,
    /npm-debug\.log/,
    /yarn-debug\.log/,
    /yarn-error\.log/
  ]
  
  function cleanLogs(dir) {
    if (!fs.existsSync(dir)) return
    
    try {
      const files = fs.readdirSync(dir)
      files.forEach(file => {
        const fullPath = path.join(dir, file)
        const stat = fs.statSync(fullPath)
        
        if (stat.isDirectory()) {
          cleanLogs(fullPath)
        } else {
          logPatterns.forEach(pattern => {
            if (file.match(pattern)) {
              deleteFile(fullPath)
            }
          })
        }
      })
    } catch (error) {
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error
    }
  }
  
  cleanLogs('.')

  // 5. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå build ‡πÅ‡∏•‡∏∞ dist
  console.log('\n5Ô∏è‚É£ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå build...')
  const buildPaths = [
    'web/dist',
    'web/build',
    'server-js/dist',
    'server-js/build'
  ]
  
  buildPaths.forEach(p => deleteRecursive(p))

  // 6. ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå cache
  console.log('\n6Ô∏è‚É£ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå cache...')
  const cachePaths = [
    '.npm',
    '.cache',
    'web/.vite',
    'server-js/.cache'
  ]
  
  cachePaths.forEach(p => deleteRecursive(p))

  // 7. ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå server ‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ)
  console.log('\n7Ô∏è‚É£ ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πà‡∏≤...')
  deleteRecursive('server')

  // 8. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
  console.log('\nüéâ ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
  console.log('‚ïê'.repeat(50))
  console.log('üì¶ ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP ‡πÅ‡∏•‡πâ‡∏ß')
  console.log('')
  console.log('üìã ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:')
  console.log('1. ‡∏™‡∏£‡πâ‡∏≤‡∏á ZIP file ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  console.log('2. ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å ZIP ‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà')
  console.log('3. ‡πÅ‡∏ï‡∏Å ZIP ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ô start.bat (Windows) ‡∏´‡∏£‡∏∑‡∏≠ start.sh (Linux/Mac)')
  console.log('')
  console.log('üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô ZIP:')
  console.log('- server-js/ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° node_modules)')
  console.log('- web/ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° node_modules)')
  console.log('- web-js/ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° node_modules)')
  console.log('- *.md (‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏ï‡πà‡∏≤‡∏á‡πÜ)')
  console.log('- *.js (‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ)')
  console.log('- start.bat, start.sh')
  console.log('- package.json')
}

main()
