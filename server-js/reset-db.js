// ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
import 'dotenv/config'
import mysql from 'mysql2/promise'

const dbConfig = {
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT) || 3306,
  user: process.env.DB_USER || 'root',
  password: process.env.DB_PASSWORD || '',
  database: process.env.DB_NAME || 'brm_rbac'
}

async function resetDatabase() {
  console.log('üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...')
  console.log('‚îÄ'.repeat(50))

  try {
    const connection = await mysql.createConnection(dbConfig)
    
    console.log('üóëÔ∏è ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤...')
    
    // ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    await connection.execute('DROP TABLE IF EXISTS submissions')
    await connection.execute('DROP TABLE IF EXISTS requests')
    await connection.execute('DROP TABLE IF EXISTS users')
    
    console.log('‚úÖ ‡∏•‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
    
    console.log('üî® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà...')
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
    await connection.execute(`
      CREATE TABLE users (
        id VARCHAR(50) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        username VARCHAR(100) UNIQUE NOT NULL,
        password_hash VARCHAR(255) NOT NULL,
        role VARCHAR(50) NOT NULL,
        createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    `)
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á requests
    await connection.execute(`
      CREATE TABLE requests (
        id VARCHAR(50) PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        category VARCHAR(100) NOT NULL,
        fiscalYear INT NOT NULL,
        amount DECIMAL(15,2) NOT NULL,
        note TEXT,
        fileName VARCHAR(255),
        fileUrl VARCHAR(500),
        status VARCHAR(50) NOT NULL DEFAULT 'pending',
        createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    `)
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á submissions
    await connection.execute(`
      CREATE TABLE submissions (
        id VARCHAR(50) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        note TEXT,
        fileName VARCHAR(255) NOT NULL,
        fileUrl VARCHAR(500) NOT NULL,
        createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4
    `)
    
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    console.log('üë• ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...')

    const bcrypt = (await import('bcryptjs')).default
    
    const users = [
      {
        id: 'admin-001',
        name: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö',
        username: 'admin',
        password: 'admin',
        role: 'admin'
      },
      {
        id: 'planner-001',
        name: '‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô',
        username: 'planner',
        password: 'planner',
        role: 'planner'
      },
      {
        id: 'procurement-001',
        name: '‡∏á‡∏≤‡∏ô‡∏û‡∏±‡∏™‡∏î‡∏∏',
        username: 'procurement',
        password: 'procurement',
        role: 'procurement'
      },
      {
        id: 'board-001',
        name: '‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£/‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£',
        username: 'board',
        password: 'board',
        role: 'board'
      }
    ]
    
    for (const user of users) {
      const passwordHash = bcrypt.hashSync(user.password, 10)
      
      await connection.execute(
        'INSERT INTO users (id, name, username, password_hash, role) VALUES (?, ?, ?, ?, ?)',
        [user.id, user.name, user.username, passwordHash, user.role]
      )
      
      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}`)
    }
    
    await connection.end()
    
    console.log('')
    console.log('üéâ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
    console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô:')
    console.log('‚îÄ'.repeat(30))
    users.forEach(user => {
      console.log(`${user.username.padEnd(12)} | ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô: ${user.password}`)
    })
    
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message)
  }
}

resetDatabase()
