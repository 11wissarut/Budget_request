import { Router } from 'express';
import { pool } from '../../db.js';
import multer from 'multer';
import { existsSync, mkdirSync } from 'fs';
import { join } from 'path';
import { authMiddleware } from '../auth-middleware.js'; 

const router = Router();

// üìÇ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = join(process.cwd(), 'uploads', 'disbursements');
    if (!existsSync(dir)) mkdirSync(dir, { recursive: true }); // ‡∏ñ‡πâ‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`); // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
  }
});
const upload = multer({ storage });

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà
router.post(
  '/',
  authMiddleware,               // ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô
  upload.array('attachments', 10), // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡πÑ‡∏ü‡∏•‡πå
  async (req, res) => {
    try {
      // üîí role board / executive ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢
      if (['board', 'executive'].includes((req.user?.role || '').toLowerCase())) {
        return res.status(403).json({ message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢' });
      }

      // üì• ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å body
      const {
        requestId,
        disbursedAmount,
        disbursedDate,
        note,
        userId
      } = req.body;

      const requestedDisbursement = parseFloat(disbursedAmount);

      // üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
      if (!requestId || isNaN(requestedDisbursement) || requestedDisbursement <= 0 || !disbursedDate) {
        return res.status(400).json({
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö: requestId, disbursedAmount, disbursedDate'
        });
      }

      const connection = await pool.getConnection();
      try {
        await connection.beginTransaction();

        // 1Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠ + ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ + ‡∏¢‡∏≠‡∏î‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏•‡∏∞ lock ‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ
        const [statusRows] = await connection.query(
          `
          SELECT
            br.approved_amount,
            br.status,
            COALESCE(SUM(d.disbursed_amount), 0) AS total_disbursed
          FROM budget_requests br
          LEFT JOIN disbursements d ON br.id = d.request_id
          WHERE br.id = ?
          GROUP BY br.id
          FOR UPDATE
        `,
          [requestId]
        );

        if (statusRows.length === 0) {
          await connection.rollback();
          return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢' });
        }

        const { approved_amount, status } = statusRows[0];
        const total_disbursed = parseFloat(statusRows[0].total_disbursed);
        const remainingBalance = parseFloat(approved_amount) - total_disbursed;

        // 2Ô∏è‚É£ ‡πÄ‡∏ä‡πá‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ
        if (!['approved', 'partially_disbursed'].includes(status)) {
          await connection.rollback();
          return res.status(400).json({ message: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ñ‡∏∑‡∏≠: ${status}` });
        }

        // 3Ô∏è‚É£ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ö‡∏¥‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
        if (status === 'disbursed') {
          await connection.rollback();
          return res.status(400).json({ message: '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß' });
        }

        // 4Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        if (requestedDisbursement > remainingBalance + 0.001) {
          await connection.rollback();
          return res.status(400).json({
            message: `‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å (${requestedDisbursement}) ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (${remainingBalance.toFixed(2)})`
          });
        }

        // 5Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢
        const disbursement = {
          request_id: requestId,
          disbursed_amount: requestedDisbursement,
          disbursed_date: disbursedDate,
          note: note || null,
          created_by: userId || req.user.id
        };
        const [insertResult] = await connection.query('INSERT INTO disbursements SET ?', disbursement);
        const disbursementId = insertResult.insertId;

        // 6Ô∏è‚É£ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        const files = req.files || [];
        if (files.length > 0) {
          const attachmentValues = files.map(file => {
            const decodedFilename = Buffer.from(file.originalname, 'latin1').toString('utf8'); // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            const filePath = file.path.replace(process.cwd(), '').replace(/\\/g, '/');
            return [disbursementId, decodedFilename, filePath];
          });
          await connection.query(
            'INSERT INTO disbursement_attachments (disbursement_id, file_name, file_path) VALUES ?',
            [attachmentValues]
          );
        }

        // 7Ô∏è‚É£ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ö‡∏¥‡∏Å‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß = disbursed ‡πÑ‡∏°‡πà‡∏´‡∏°‡∏î = partially_disbursed
        const newTotalDisbursed = total_disbursed + requestedDisbursement;
        let newStatus = 'partially_disbursed';
        if (newTotalDisbursed >= parseFloat(approved_amount) - 0.001) {
          newStatus = 'disbursed';
        }

        await connection.query('UPDATE budget_requests SET status = ? WHERE id = ?', [newStatus, requestId]);

        await connection.commit();

        // ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡∏°‡πà
        const remainingAfter = parseFloat(approved_amount) - newTotalDisbursed;

        res.status(201).json({ 
          message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 
          newStatus, 
          remainingBalance: remainingAfter.toFixed(2) 
        });
      } catch (e) {
        await connection.rollback();
        console.error(e);
        res.status(500).json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏à‡πà‡∏≤‡∏¢‡πÑ‡∏î‡πâ', error: e.message });
      }
    } catch (e) {
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö', error: e.message });
    }
  }
);

export default router;
